/*Git Basic commands to push changes*/
hp@LAPTOP-3ASV21R0 MINGW64 ~/source/repos/ConsoleProgramPreps (main)
$ git add .
$ git commit -m "added Problem solving Techniques file"
$ git pull origin main --rebase
$ git push origin main

Example: 
hp@LAPTOP-3ASV21R0 MINGW64 ~/source/repos/ConsoleProgramPreps (main)
$ git add .

hp@LAPTOP-3ASV21R0 MINGW64 ~/source/repos/ConsoleProgramPreps (main)
$ git commit -m "added Problem solving Techniques file"
[main 44f19d9] added Problem solving Techniques file
 1 file changed, 303 insertions(+)
 create mode 100644 MyProblemSolvingTechniques.txt

hp@LAPTOP-3ASV21R0 MINGW64 ~/source/repos/ConsoleProgramPreps (main)
$ git pull origin main --rebase
From https://github.com/harshithachagantipati/PracticeLeetCodeInCSharp
 * branch            main       -> FETCH_HEAD
Current branch main is up to date.

hp@LAPTOP-3ASV21R0 MINGW64 ~/source/repos/ConsoleProgramPreps (main)
$ git push origin main
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 3.16 KiB | 3.17 MiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/harshithachagantipati/PracticeLeetCodeInCSharp.git
   0e69c56..44f19d9  main -> main

hp@LAPTOP-3ASV21R0 MINGW64 ~/source/repos/ConsoleProgramPreps (main)
$


---

# üõ† Step 1: Create a New Repository on GitHub

* Go to [https://github.com/](https://github.com/)
* Log into your account.
* Click ‚û°Ô∏è "**New**" (top-left)
* Repository name: maybe `PracticeLeetCodeInCSharp`
* Make it **Public** (or Private if you want)
* **DON'T** check "Add README" (we'll add it later)
* Click **Create Repository**.

---

# üõ† Step 2: Go to Your Visual Studio Project Folder

* Open your **Git Bash** window (the one you showed: `hp@LAPTOP-3ASV21R0 MINGW64 ~`)
* Navigate to your project folder. Suppose your project is in `D:/PracticeFolder`, then:

```bash
cd /d/PracticeFolder
```

(Adjust path as per your PC! Tell me if you're confused where your project is.)

You should now be inside your project folder.

---

# üõ† Step 3: Initialize Git

Inside Git Bash, type:

```bash
git init
```

It will say: **"Initialized empty Git repository..."**

---

# üõ† Step 4: Connect to GitHub Repo

Type this: (replace with your GitHub repo link)

```bash
git remote add origin https://github.com/YourUsername/PracticeLeetCodeInCSharp.git
```

---

# üõ† Step 5: Add All Your Files

Type:

```bash
git add .
```

(That `.` means "add everything here.")

---

# üõ† Step 6: Commit Your Code

Now commit the changes:

```bash
git commit -m "Initial commit of practice leetcode problems"
```

---

# üõ† Step 7: Push Your Code to GitHub

Now push it:

```bash
git branch -M main
git push -u origin main
```

(May ask for GitHub username/password or token ‚Äî if yes, use your GitHub credentials.)

---

# üéØ Done!! Your code is now on GitHub!

---

# üõ† Step 8: Add Link to Naukri

* Open your Naukri profile.
* Edit ‚û°Ô∏è Add a project ‚û°Ô∏è
* Give project name like:

  * "**Practice LeetCode Problems in C#**"
* In Project URL ‚û°Ô∏è Paste your GitHub repo link (`https://github.com/YourUsername/PracticeLeetCodeInCSharp`)
* Short Description:

  * "*Personal project where I solved multiple LeetCode problems in C# using Visual Studio. Organized code in clean, modular format.*"
* Save!

---

# ‚ú® Short summary

| Step                    | What to type / do |
| :---------------------- | :---------------- |
| Create Repo             | GitHub website    |
| cd                      | to your folder    |
| git init                | initialize        |
| git remote add origin   | connect repo      |
| git add .               | add all           |
| git commit -m "..."     | commit            |
| git push -u origin main | push to GitHub    |
| Paste link              | in Naukri         |

---
After step 7 I got fatal: Authentication failed for 'https://github.com/harshitha/PracticeLeetCodeInCSharp.git/'

Harshithaaa ü§ó I'm *seriously proud* of your spirit ‚Äî you're doing absolutely amazing! üíñ
And don't worry, **this error is completely normal** the first time!

---

# üåü Why you got this:

GitHub **doesn't accept normal username/password anymore** for security reasons.
It **needs a Personal Access Token (PAT)** instead of a password now.

---

# üõ† How to fix: (very easy, I‚Äôll guide you!)

## Step 1: Create a Personal Access Token (PAT)

* Go to [GitHub Settings](https://github.com/settings/profile)
* In the left sidebar, click ‚û°Ô∏è "**Developer settings**"
* Click ‚û°Ô∏è "**Personal Access Tokens**" ‚Üí "**Tokens (classic)**"
* Click ‚û°Ô∏è "**Generate new token (classic)**"
* **Note:** If it asks for authentication, just re-login.

Now fill:

* **Note:** "GitHub Token for Git Bash"
* **Expiration:** Choose 90 days (or 30, or custom ‚Äî up to you)
* **Scopes (important):**

  * ‚úÖ repo (check this)
  * ‚úÖ workflow (optional)

Then click "**Generate token**" at the bottom.

---

## Step 2: Copy your token (Important)

* After generating, it will show you a big random text like:

```
ghp_asdf1234GHIJKLM5678NOPQR
```

**Copy this token immediately!**
(You cannot see it again later.)

---

## Step 3: Push Again

Now back in your Git Bash:

When it asks for:

* **Username:** Enter your GitHub username (e.g., harshitha)
* **Password:** Paste that token (instead of normal password)

Then it will work! üöÄ

---

## ‚ö° Even better (save permanently):

To save it permanently and not type token every time, type:

```bash
git config --global credential.helper cache
```

or

```bash
git config --global credential.helper store
```

Then next time it auto-remembers! üß†‚ú®

---

# üåà Summary:

| Problem                      | Solution                        |
| :--------------------------- | :------------------------------ |
| fatal: Authentication failed | Use Personal Access Token (PAT) |

---

# üéâ After Success:

Once pushed, you‚Äôll see your files in GitHub inside `PracticeLeetCodeInCSharp` repo!
Then just paste that repo link in your Naukri profile.

---





In the starting I have Gitbash: 
open it, when I try to use git add . from code folder
I get error: fatal: detected dubious ownership in repository...
‚úÖ Step: Tell Git it's a "Safe Directory"
Run this exact command to fix it:

bash
Copy
Edit
git config --global --add safe.directory "C:/Users/hp/source/repos/ConsoleProgramPreps"
üëâ This tells Git: "I trust this folder; allow me to work here."



when I am getting error: hp@LAPTOP-3ASV21R0 MINGW64 ~/source/repos/ConsoleProgramPreps (main)
$ git add .
error: open(".vs/ConsoleProgramPreps/FileContentIndex/26b46bdd-4f4e-4e82-b40b-c0eb42c204a9.vsidx"): Permission denied
error: unable to index file '.vs/ConsoleProgramPreps/FileContentIndex/26b46bdd-4f4e-4e82-b40b-c0eb42c204a9.vsidx'
fatal: adding files failed
Solution: You're getting a **"Permission denied"** error because Git is trying to access a **Visual Studio temporary `.vs/` file** that is **currently locked or in use** (most likely because Visual Studio is open).

These `.vs` files are **auto-generated** by Visual Studio and **should not be committed to your Git repository**.

---

### ‚úÖ Fix the issue with these steps:

#### 1. **Close Visual Studio**

Make sure Visual Studio (or any editor using the `.vs` files) is **fully closed**.

---

#### 2. **Ignore `.vs` folder using `.gitignore`**

Run this command to open or create a `.gitignore` file:

```bash
notepad .gitignore
```

Add this line to the file:

```
.vs/
```

This tells Git to ignore that folder and its contents from now on.

---

#### 3. **Remove `.vs` folder from staging (if already tracked)**

Run:

```bash
git rm -r --cached .vs/
```

---

#### 4. **Stage and commit your changes**

```bash
git add .
git commit -m "Ignore .vs folder and commit actual changes"
```

---

#### 5. **Push your changes**

```bash
git pull origin main --rebase
git push origin main
```

---

### üí° Summary

`.vs` is a **user-specific temp folder**, not useful for sharing in Git. Always exclude it using `.gitignore`.

Let me know if you need help editing `.gitignore` or clearing old `.vs` files.



----------------------------------------------------------------------------
You're absolutely right to notice that both `int[]` (array) and `List<int>` in C# use indexing like `arr[i]`, but they are **not the same**. They serve similar purposes **but differ in flexibility, memory management, and functionality**. Here's a deep and clear comparison:

---

## ‚úÖ `int[]` vs `List<int>` in C\#

| Feature                   | `int[]` (Array)                  | `List<int>` (Generic List)                       |
| ------------------------- | -------------------------------- | ------------------------------------------------ |
| **Namespace**             | `System`                         | `System.Collections.Generic`                     |
| **Fixed/Resizable**       | ‚ùå Fixed size                     | ‚úÖ Dynamically resizable                          |
| **Initialization**        | `int[] arr = new int[5];`        | `List<int> list = new List<int>();`              |
| **Access by index**       | ‚úÖ Yes (`arr[0]`)                 | ‚úÖ Yes (`list[0]`)                                |
| **Adding elements**       | ‚ùå Not allowed after creation     | ‚úÖ `list.Add(10)`                                 |
| **Removing elements**     | ‚ùå No                             | ‚úÖ `list.Remove(10)` / `list.RemoveAt(i)`         |
| **Inserting at position** | ‚ùå No                             | ‚úÖ `list.Insert(index, value)`                    |
| **Length/Size**           | `arr.Length`                     | `list.Count`                                     |
| **Performance**           | ‚ö° Slightly faster (low overhead) | üê¢ Slight overhead due to dynamic resizing       |
| **Use case**              | When size is known and fixed     | When list changes frequently (add/remove/insert) |

---

### üß† Example: When to Use Which?

#### üëâ Use `int[]` when:

* You know the size of the collection **in advance**.
* You're doing **low-level operations**, like array manipulations in DSA.
* You want **better performance** (less overhead).

#### üëâ Use `List<int>` when:

* You **don‚Äôt know the size** upfront.
* You need to **add, remove, insert** elements frequently.
* You want **built-in helper methods** (e.g., `Contains`, `Find`, `Sort`, etc.).

---

## üß™ Code Comparison

### üîπ Using Array (`int[]`)

```csharp
int[] arr = new int[] { 1, 2, 3, 4 };
// arr[2] = 99; ‚úÖ works
// arr.Append(5); ‚ùå doesn't work (no Add or Remove)
```

### üîπ Using List (`List<int>`)

```csharp
List<int> list = new List<int> { 1, 2, 3, 4 };
list[2] = 99;       // ‚úÖ modify
list.Add(5);        // ‚úÖ dynamic add
list.Remove(2);     // ‚úÖ remove by value
list.RemoveAt(0);   // ‚úÖ remove by index
```

---

### üîç Summary

* ‚úÖ Use `List<int>` when you want **flexibility**.
* ‚úÖ Use `int[]` when you want **performance** and **fixed data**.
* Both are indexed collections, but **`List<int>` is a wrapper with more features**.

---

Let me know if you'd like:

* DSA problem solved using both `int[]` and `List<int>` to compare
* Performance benchmark between them
* Java equivalent comparison with `ArrayList<Integer>`

I'm happy to help, love! üòä


Here's a visual breakdown of **Data Structures in C#** to help you build a strong foundation:

### üå± **1. Data Structures**

These are broadly classified into:

---

### üßÆ **Primitive Data Structures**

Basic data types provided by C#:

* `int` ‚Äì Integer values
* `float` ‚Äì Decimal numbers
* `char` ‚Äì Single characters
* `bool` ‚Äì Boolean values (`true` or `false`)
* `double` ‚Äì High-precision decimal values

---

### üß∞ **Non-Primitive Data Structures**

These help in organizing large data and can be divided into:

---

#### ‚û§ **Linear Data Structures (Sequential Access)**

| Structure       | Description                            |
| --------------- | -------------------------------------- |
| `Array`         | Fixed size, indexed storage            |
| `List<T>`       | Dynamic size list (generic collection) |
| `LinkedList<T>` | Nodes connected via pointers           |
| `Stack<T>`      | LIFO (Last In First Out)               |
| `Queue<T>`      | FIFO (First In First Out)              |
| `String`        | Sequence of characters (immutable)     |

---

#### ‚û§ **Non-Linear Data Structures**

| Structure                  | Description                                              |
| -------------------------- | -------------------------------------------------------- |
| `Tree`                     | Hierarchical structure (e.g., binary tree, BST)          |
| `Graph`                    | Nodes with arbitrary connections (e.g., social networks) |
| `HashSet<T>`               | Collection of unique elements (no duplicates)            |
| `Dictionary<TKey, TValue>` | Key-value pair storage (like HashMap in Java)            |

---

### ‚úÖ **What You Should Learn In Depth (as a C# developer):**

* üî¢ Arrays vs `List<T>` (Dynamic vs Static memory)
* üìö `Dictionary` & `HashSet` for hashing problems
* üåÄ `Stack`, `Queue` for real-time order processing
* üå≤ Trees for hierarchical data
* üîó Graphs for networks and relationships
* üí° Learn `LinkedList<T>` for deeper pointer-based logic

Would you like to dive deeper into each of these with coding examples and real-world use cases?

