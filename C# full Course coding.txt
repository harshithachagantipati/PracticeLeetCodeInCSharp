// Implementing a calculator in 
// C# using switch statement
using System;
using System.Text;
using System.Threading.Tasks;

namespace calculator_c_sharp
{
	class Program
	{
		static void Main(string[] args)
		{
			string value;
			do
			{
				int result;
				Console.Write("Enter first number:");
				int num1 = Convert.ToInt32(Console.ReadLine());
				Console.Write("Enter second number:");
				int num2 = Convert.ToInt32(Console.ReadLine());
				Console.Write("Enter symbol(/,+,-,*):");
				string symbol = Console.ReadLine();

				switch (symbol)
				{
					case "+":
						result = num1 + num2;
						Console.WriteLine("Addition:" + result);
						break;
					case "-":
						result = num1 - num2;
						Console.WriteLine("Subtraction:" + result);
						break;
					case "*":
						result = num1 * num2;
						Console.WriteLine("Multiplication:" + result);
						break;
					case "/":
						result = num1 / num2;
						Console.WriteLine("Division:" + result);
						break;
					default:
						Console.WriteLine("Wrong input");
						break;
				}
				Console.ReadLine();
				Console.Write("Do you want to continue(y/n):");
				value = Console.ReadLine();
			}
			while (value=="y" || value=="Y");
		}
	}
}

// Demonstration of Jagged Array
using System;
    
class Geeks 
{

    public static void Main()
    {
        // Declaring Jagged Array
        int[][] arr = { new int[] { 1, 3, 5, 7, 9 },
                        new int[] { 2, 4, 6, 8 } };
        
        Console.WriteLine("Arrays :");
      
          // Display the array elements:
        for (int i = 0; i < arr.Length; i++)
        {
            System.Console.Write("Elements[" + i + "] Array: ");
            
              // Printing the elements of array
              for (int j = 0; j < arr[i].Length; j++) {
                Console.Write(arr[i][j] + " ");
            }
          
            Console.WriteLine();
        }
    }
}

Output
Arrays :
Elements[0] Array: 1 3 5 7 9 
Elements[1] Array: 2 4 6 8 

Types of Sorting Algorithms
These are the custom algorithms which are used to sort the array. We can learn this algorithm how works internally will enhance the logic-building ability and we can understand the internal functionalities of these algorithms.

Bubble Sort
Selection Sort
Insertion Sort
Merge Sort
Heap Sort
Quick Sort
Radix Sort
Counting Sort
Each sorting algorithm has its advantages and is suitable for different scenarios based on factors such as array size, data distribution, and stability requirements (whether it maintains the relative order of equal elements).

1. Bubble Sort
Bubble Sort is a simple sorting algorithm. It repeatedly compares the adjacent elements if they are not sorted so they swap their positions. The process is repeated the elements are not arranged in sorted order.
using System;

class Geeks
{
	// Function to implement Bubble Sort
	public static void BubbleSort(int[] arr)
	{
		int n = arr.Length;
		bool swapped;

		// Traverse through all array elements
		for (int i = 0; i < n - 1; i++)
		{
			swapped = false;

			// Last i elements are already in place
			for (int j = 0; j < n - 1 - i; j++)
			{
				// Swap if the element found is 
                // greater than the next element
				if (arr[j] > arr[j + 1])
				{
					// Swap the elements
					int temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
					swapped = true;
				}
			}

			// If no two elements were swapped by inner loop
			// then the array is sorted
			if (!swapped)
				break;
		}
	}

	static void Main()
	{
		// Example array to be sorted
		int[] arr = { 10, 2, 3, 5, 7, 1, 4, 8};

		// Print the original array
		Console.WriteLine("Original array:");
		foreach (int num in arr)
		{
			Console.Write(num + " ");
		}
		Console.WriteLine();
      Console.WriteLine("Array String: "+ string.Join(",", arr));


		// Call BubbleSort method
		BubbleSort(arr);

		// Print the sorted array
		Console.WriteLine("Sorted array:");

		foreach (int num in arr)
			Console.Write(num + " ");
		      Console.WriteLine("Array String: "+ string.Join(",", arr));

	}
}
Output
Original array:
10 2 3 5 7 1 4 8 
Array String: 10,2,3,5,7,1,4,8
Sorted array:
1 2 3 4 5 7 8 10 
Array String: 1,2,3,4,5,7,8,10

2. Selection Sort
Selection Sort works by repeatedly finding the minimum element from the unsorted part of the array and placing it at the beginning. Here's how we can implement it in C#:
using System;

public class Geeks
{
    // Selection Sort
    public static void SelectionSort(int[] arr)
    {
        int n = arr.Length;
        
        for (int i = 0; i < n - 1; i++)
        {
            int minIndex = i;
            // Find the index of the minimum 
            // element in the unsorted part
            for (int j = i + 1; j < n; j++)
            {
                if (arr[j] < arr[minIndex])
                {
                    minIndex = j;
                }
            }
            
            // Swap the found minimum element with the 
            // first element of the unsorted part
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }
    
    public static void Main()
    {
        int[] numbers = { 64, 25, 12, 22, 11 };
        Console.WriteLine("Original Array:");
        PrintArray(numbers);
        
        // Call to sort the array using Selection Sort
        SelectionSort(numbers); 
        
        Console.WriteLine("\nSorted Array:");
        PrintArray(numbers);
    }
    
    // Helper method to print an array
    public static void PrintArray(int[] arr)
    {
        foreach (int num in arr)
        {
            Console.Write(num + " ");
        }
        Console.WriteLine();
    }
}

Output
Original Array:
64 25 12 22 11 

Sorted Array:
11 12 22 25 64 

3. Insertion Sort
Insertion Sort builds the sorted array one element at a time. It takes an element from the unsorted portion and places it in its correct position within the sorted part of the array by shifting larger elements to the right. This differentiates it from Selection Sort, which selects the smallest element and swaps it, and Bubble Sort, which repeatedly compares and swaps adjacent elements.
using System;

class Geeks
{
    // Function to implement Insertion Sort
    public static void InsertionSort(int[] arr)
    {
        int n = arr.Length;

        // Iterate through elements of arr
        for (int i = 1; i < n; i++)
        {
            int temp = arr[i];
            int j = i - 1;

            // Move elements of arr greater than the temp
            // to one position ahead of their current position
            while (j >= 0 && arr[j] > temp)
            {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            // Place the temp at after the 
            // element just smaller than it.
            arr[j + 1] = temp;
        }
    }

    static void Main()
    {
        // Example array to be sorted
        int[] arr = { 12, 11, 13, 5, 6 };

        // Print the original array
        Console.WriteLine("Original array:");
        foreach (int num in arr)
        {
            Console.Write(num + " ");
        }
        Console.WriteLine();

        // Call InsertionSort method
        InsertionSort(arr);

        // Print the sorted array
        Console.WriteLine("Sorted array:");
        foreach (int num in arr)
            Console.Write(num + " ");
    }
}
Output
Original array:
12 11 13 5 6 
Sorted array:
5 6 11 12 13 
